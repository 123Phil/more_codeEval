"""
Author: Phillip Stewart
Date: 27 March 2016
CodeEval Challenge: Simple Calculator
"""

import sys
from decimal import Decimal

def separate(line):
	# is_unary tracks whether '-' is a unary or binary operator
	parts = []
	i = 0
	is_unary = True
	neg = False
	while i < len(line):
		if line[i] in '(^*/+':
			parts.append(line[i])
			is_unary = True
		elif line[i] == ')':
			parts.append(')')
			is_unary = False
		elif line[i] == '-' and not is_unary:
			parts.append('-')
			is_unary = True
		elif line[i] == '-' and (line[i+1] == '(' or line[i+1] == '-'):
			if line[i+1] == '-':
				i += 1
			else:
				parts.append('neg')
				parts.append('(')
				i += 1
			is_unary = True
		else:
			if line[i] == '-':
				neg = True
				i += 1
			else:
				neg = False
			num = 0
			start = i
			while i+1 < len(line) and line[i+1] in '1234567890':
				i += 1
			if i+1 < len(line) and line[i+1] == '.':
				i += 1
				while i+1 < len(line) and line[i+1] in '1234567890':
					i += 1
				num = float(line[start:i+1])
			else:
				num = int(line[start:i+1])
			if neg:
				num *= -1
			parts.append(num)
			is_unary = False
		i += 1
	return parts


def calc(parts):
	return addsub(muldiv(exp(negate(parens(parts)))))[0]


def parens(parts):
	i = 0
	nested = 0
	start = 0
	while i < len(parts):
		if parts[i] == '(':
			if nested == 0:
				start = i
			nested += 1
		if parts[i] == ')':
			if nested == 1:
				parts = parts[:start] + [calc(parts[start+1:i])] + parts[i+1:]
				i = 0
				nested = 0
				continue
			else:
				nested -= 1
		i += 1
	#print parts
	return parts


def negate(parts):
	i = len(parts) - 1
	while i >= 0:
		if parts[i] == 'neg':
			parts = parts[:i] + [-parts[i+1]] + parts[i+2:]
			continue
		i -= 1
	#print parts
	return parts


def exp(parts):
	i = 0
	while i < len(parts):
		if parts[i] == '^':
			parts = parts[:i-1] + [pow(parts[i-1], parts[i+1])] + parts[i+2:]
			continue
		i += 1
	#print parts
	return parts


def muldiv(parts):
	i = 0
	while i < len(parts):
		if parts[i] == '*':
			parts = parts[:i-1] + [parts[i-1] * parts[i+1]] + parts[i+2:]
			continue
		elif parts[i] == '/':
			dividend, divisor = parts[i-1], parts[i+1]
			quotient = 0
			if type(divisor) == int and type(dividend) == int and dividend % divisor == 0:
				quotient = dividend / divisor
			else:
				try:
					quotient = dividend / float(divisor)
				except OverflowError:
					quotient = float(Decimal(dividend) / Decimal(divisor))
			parts = parts[:i-1] + [quotient] + parts[i+2:]
			continue
		i += 1
	#print parts
	return parts


def addsub(parts):
	i = 0
	while i < len(parts):
		if parts[i] == '+':
			parts = parts[:i-1] + [parts[i-1] + parts[i+1]] + parts[i+2:]
			continue
		elif parts[i] == '-':
			parts = parts[:i-1] + [parts[i-1] - parts[i+1]] + parts[i+2:]
			continue
		i += 1
	#print parts
	return parts


def num_print(num):
	if type(num) == int:
		print num
	else:
		print "{:.5f}".format(num).rstrip('0').rstrip('.')


def main(args):
	if len(args) != 2:
		print 'Usage ~$ ' + args[0] + ' <input file>'
		sys.exit(0)
	else:
		filename = args[1]
	
	with open(filename, 'r') as f:
		for line in f:
			if line == '\n':
				continue
			parts = separate(line.strip().replace(' ', ''))
			num_print(calc(parts))

			
if __name__ == "__main__":
	main(sys.argv)
